<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AppDisplayName" xml:space="preserve">
    <value>Select_Lucky_Dog</value>
    <comment>Application display name</comment>
  </data>
  <data name="AppDescription" xml:space="preserve">
    <value>Select_Lucky_Dog</value>
    <comment>Application description</comment>
  </data>
  <data name="Shell_Main.Content" xml:space="preserve">
    <value>Main</value>
    <comment>Navigation view item name for Main</comment>
  </data>
  <data name="Details_NoSelection.Text" xml:space="preserve">
    <value>Select an item from the list.</value>
    <comment>No selection text for Details</comment>
  </data>
  <data name="Details.ListHeader" xml:space="preserve">
    <value>Details</value>
    <comment>Title for DetailsPage</comment>
  </data>
  <data name="Shell_Details.Content" xml:space="preserve">
    <value>Details</value>
    <comment>Navigation view item name for Details</comment>
  </data>
  <data name="FilesTitle.Text" xml:space="preserve">
    <value>Files</value>
    <comment>Title for FilesPage</comment>
  </data>
  <data name="TreeView_CollapseAllButton.[using:Windows.UI.Xaml.Controls]ToolTipService.ToolTip" xml:space="preserve">
    <value>Collapse all</value>
    <comment>Tooltip for Collapse all button in TreeViewPages</comment>
  </data>
  <data name="TreeView_CollapseAllButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name" xml:space="preserve">
    <value>Collapse all</value>
    <comment>Automation Name for Collapse all button in TreeViewPages</comment>
  </data>
  <data name="Shell_Files.Content" xml:space="preserve">
    <value>Files</value>
    <comment>Navigation view item name for Files</comment>
  </data>
  <data name="Settings_Theme.Text" xml:space="preserve">
    <value>Choose Theme</value>
    <comment>Choose theme text for Settings</comment>
  </data>
  <data name="Settings_Theme_Dark.Content" xml:space="preserve">
    <value>Dark</value>
    <comment>Dark theme text for Settings</comment>
  </data>
  <data name="Settings_Theme_Default.Content" xml:space="preserve">
    <value>Windows default</value>
    <comment>Windows default theme text for Settings</comment>
  </data>
  <data name="Settings_Theme_Light.Content" xml:space="preserve">
    <value>Light</value>
    <comment>Light theme text for Settings</comment>
  </data>
  <data name="Settings_About.Text" xml:space="preserve">
    <value>About this application</value>
    <comment>About this application title for Settings</comment>
  </data>
  <data name="Settings_AboutDescription.Text" xml:space="preserve">
    <value>Settings page placeholder text.  Your app description goes here.</value>
    <comment>About this application description for Settings</comment>
  </data>
  <data name="Settings_PrivacyTermsLink.Content" xml:space="preserve">
    <value>Privacy Statement</value>
    <comment>Privacy Statement link content for Settings</comment>
  </data>
  <data name="Settings_PrivacyTermsLink.NavigateUri" xml:space="preserve">
    <value>https://YourPrivacyUrlGoesHere/</value>
    <comment>Here is your Privacy Statement url for Settings</comment>
  </data>
  <data name="Settings_Personalization.Text" xml:space="preserve">
    <value>Personalization</value>
    <comment>Personalization text for Settings</comment>
  </data>
  <data name="FirstRun_Body.Text" xml:space="preserve">
    <value>Replace the content of this dialog with whatever content is appropriate to your app.
You might want to explain key features or functionality.
Don't feel restricted to just text. You can also include images and animations if you wish too.

Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Maecenas porttitor congue massa. Fusce posuere, magna sed pulvinar ultricies, purus lectus malesuada libero, sit amet commodo magna eros quis urna.

Nunc viverra imperdiet enim. Fusce est. Vivamus a tellus.

Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Proin pharetra nonummy pede. Mauris et orci.

Suspendisse dui purus, scelerisque at, vulputate vitae, pretium mattis, nunc. Mauris eget neque at sem venenatis eleifend. Ut nonummy.</value>
    <comment>First use prompt message body</comment>
  </data>
  <data name="FirstRunDialog.Title" xml:space="preserve">
    <value>Welcome</value>
    <comment>First use prompt message title</comment>
  </data>
  <data name="FirstRunDialog.PrimaryButtonText" xml:space="preserve">
    <value>Ok</value>
    <comment>First use prompt message primary button text</comment>
  </data>
  <data name="WhatsNew_Body.Text" xml:space="preserve">
    <value>Replace the content of this dialog with whatever content is appropriate to your app.
You might want to consider lists of bug fixes and new features.
Don't feel restricted to just text. You can also include images and animations if you wish too.

Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Maecenas porttitor congue massa. Fusce posuere, magna sed pulvinar ultricies, purus lectus malesuada libero, sit amet commodo magna eros quis urna.
Nunc viverra imperdiet enim. Fusce est. Vivamus a tellus.
Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Proin pharetra nonummy pede. Mauris et orci.
Suspendisse dui purus, scelerisque at, vulputate vitae, pretium mattis, nunc. Mauris eget neque at sem venenatis eleifend. Ut nonummy.</value>
    <comment>What's new prompt message body</comment>
  </data>
  <data name="WhatsNewDialog.Title" xml:space="preserve">
    <value>What's new in this version</value>
    <comment>What's new prompt message title</comment>
  </data>
  <data name="WhatsNewDialog.PrimaryButtonText" xml:space="preserve">
    <value>Ok</value>
    <comment>What's new prompt message primary button text</comment>
  </data>
  <data name="AppTitleTextBlock.Text" xml:space="preserve">
    <value>Select Lucky Dog</value>
    <comment>AppTitleText</comment>
  </data>
  <data name="PivotAll.Text" xml:space="preserve">
    <value>All</value>
    <comment>PivotAllText</comment>
  </data>
  <data name="PivotFinished.Text" xml:space="preserve">
    <value>Finished</value>
    <comment>PivotFinishedText</comment>
  </data>
  <data name="PivotGoing.Text" xml:space="preserve">
    <value>Going</value>
    <comment>PivotGoingText</comment>
  </data>
  <data name="PivotUnfinished.Text" xml:space="preserve">
    <value>Unfinished</value>
    <comment>PivotUnfinishedText</comment>
  </data>
  <data name="SearchBox.PlaceholderText" xml:space="preserve">
    <value>Search</value>
    <comment>SearchBoxText</comment>
  </data>
  <data name="ConnectDataSet.Content" xml:space="preserve">
    <value>Connect Data Set</value>
    <comment>ConnectDataSetContent</comment>
  </data>
  <data name="DeveloperTools.Content" xml:space="preserve">
    <value>Developer Tools</value>
    <comment>DeveloperToolsButton</comment>
  </data>
  <data name="DisplayMode.Header" xml:space="preserve">
    <value>Display Mode</value>
    <comment>DisplayModeHeader</comment>
  </data>
  <data name="RandomButton.Content" xml:space="preserve">
    <value>R</value>
    <comment>RandomButtonText</comment>
  </data>
  <data name="SelectDataSetButton.Content" xml:space="preserve">
    <value>Select Data Set</value>
    <comment>SelectDataSetButtonContent</comment>
  </data>
  <data name="DeleteButton.Content" xml:space="preserve">
    <value>Delete</value>
    <comment>DeleteButtonContent</comment>
  </data>
  <data name="DeleteDataSetButton.Text" xml:space="preserve">
    <value>Data Set</value>
    <comment>DeleteDataSetButtonText</comment>
  </data>
  <data name="DeleteLogFileButton.Text" xml:space="preserve">
    <value>Log File</value>
    <comment>DeleteLogFileButtonText</comment>
  </data>
  <data name="DeleteUserDataButton.Text" xml:space="preserve">
    <value>User Data</value>
    <comment>DeleteUserDataButtonText</comment>
  </data>
  <data name="LayOutButton.Content" xml:space="preserve">
    <value>Lay out</value>
    <comment>LayOutButtonText</comment>
  </data>
  <data name="LayoutDataSetButton.Text" xml:space="preserve">
    <value>Data Set</value>
    <comment>LayoutDataSetButtonText</comment>
  </data>
  <data name="LayoutIdentityFileButton.Text" xml:space="preserve">
    <value>Identity File</value>
    <comment>LayoutIdentityFileButtonText</comment>
  </data>
  <data name="MarkFinishedButton.Text" xml:space="preserve">
    <value>Mark Finished</value>
    <comment>MarkFinishedButtonText</comment>
  </data>
  <data name="MarkGoingButton.Text" xml:space="preserve">
    <value>Mark Going</value>
    <comment>MarkGoingButtonText</comment>
  </data>
  <data name="MarkUnfinishedButton.Text" xml:space="preserve">
    <value>Mark Unfinished</value>
    <comment>MarkUnfinishedButtonText</comment>
  </data>
  <data name="OperateStudentButton.Content" xml:space="preserve">
    <value>Operate</value>
    <comment>OperateStudentButtonContent</comment>
  </data>
  <data name="PraiseButton.Content" xml:space="preserve">
    <value>Praise</value>
    <comment>PraiseButtonContent</comment>
  </data>
  <data name="SaveButton.Text" xml:space="preserve">
    <value>Save</value>
    <comment>SaveButtonText</comment>
  </data>
  <data name="WhetherMark.Header" xml:space="preserve">
    <value>Mark</value>
    <comment>WhetherMarkHeader</comment>
  </data>
  <data name="WhetherMark.OffContent" xml:space="preserve">
    <value>Off</value>
    <comment>WhetherMarkOffContent</comment>
  </data>
  <data name="WhetherMark.OnContent" xml:space="preserve">
    <value>On</value>
    <comment>WhetherMarkOnContent</comment>
  </data>
</root>